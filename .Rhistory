indepvar$univ=indepvar$degree
indepvar$univ=ifelse(indepvar$univ<=4,0,
ifelse(indepvar$univ==5,1,NA))
degreafter<- sjPlot::plot_frq(indepvar$univ, coord.flip = TRUE, title = "Dummy university")
cowplot::plot_grid(degrebefore, degreafter, ncol=2)
### Recode Income
#stargazer(indepvar[1:41], type="html")
# Income (variables finish in _inc)
# Continuo
# Recode missings
# Para todos los paises, recode missings.
indepvar[1:41][indepvar[1:41] >= 9999990] <- NA
indepvar[1:41][indepvar[1:41] == 999990] =NA
indepvar[1:41][indepvar[1:41] == 999997] =NA
indepvar[1:41][indepvar[1:41] == 999998] =NA
indepvar[1:41][indepvar[1:41] == 999999] =NA
# Identificar ceros (para poder diferenciar de los NAs luego)
indepvar[1:41][indepvar[1:41] == 0] <- 111111
# Agregar ahora todos en un solo vector
indepvar$income=rowSums(indepvar[1:41],na.rm = TRUE)
indepvar$income[indepvar$income ==0]=NA
indepvar$income[indepvar$income ==1111]=0
#stargazer(indepvar[1:41], type="html")
#summary(indepvar$income)
### Recode Household income
# Household income
# Preparar numero de personas en household
indepvar$hompop[indepvar$hompop==99]=NA
# Ahora dividir el vector income por n° de personas en hogar
indepvar$hhincome=indepvar$income/indepvar$hompop
summary(indepvar$hhincome)
# Y ajustar NAs de la variable final ingreso continuo
indepvar$hhincome[indepvar$hhincome==0]= NA
indepvar$hhincome[indepvar$income==111111]= 0
indepvar$hhincome[indepvar$hompop==0]= NA
#Wsummary(indepvar$hhincome)
# check
income=indepvar[c("v5", "ar_inc", "hompop","income",
"hhincome")]
# View(income)
# Generar quintiles de ingreso
indepvar %>% group_by(v5) %>% mutate(quintile =
ntile(hhincome,5)) ->indepvar
# Check
#prop.table(table(indepvar$v5,indepvar$quintile),1)*100
# Generar quintiles con NA como categoria
indepvar$quintile_miss=indepvar$quintile
indepvar$quintile_miss[is.na(indepvar$quintile_miss)] = 6
sjPlot::plot_frq(indepvar$quintile_miss, coord.flip = TRUE, title = "Quintiles de ingreso" , axis.labels=c("quintile 1","quintile 2","quintile 3","quintile 4","quintile 5","Miss"))
#stargazer(indepvar$quintile_miss, type = "html")
### Recode Subjetive status
# Subjective status
# Individual
#freq(indepvar$v44)
indepvar$sstatus=indepvar$v44
indepvar$sstatus[indepvar$ssttus>10]=NA
#freq(indepvar$sstatus)
# Family
#freq(indepvar$v45)
indepvar$f_sstatus=indepvar$v45
indepvar$f_sstatus[indepvar$f_sstatus>10]=NA
#freq(indepvar$f_sstatus)
movestatusbefore <- sjPlot::plot_frq(indepvar$movstatus, coord.flip = TRUE, title = "Subjective status mobility before")
indepvar$movstatus[indepvar$movstatus>=8]= NA
indepvar$movstatus <- car::recode(indepvar$movstatus,recodes ="c(1,2)=2;3=1;c(4,5)=3;c(6,7)=4")
indepvar$movstatus <- set_labels(indepvar$movstatus,labels = c("Sin movilidad"=1,
"Mov. Ascendente"=2,
"Mov. Descendente"=3,
"Indeterminado"=4))
movestatusafter <- sjPlot::plot_frq(indepvar$movstatus, coord.flip = TRUE, title = "subjective status mobility after")
cowplot::plot_grid(movestatusbefore, movestatusafter, ncol=2)
# Chunk 14
#Codigos por incorporar: se deben hacer ajustes de moneda y partidos por pais.
# Home value (ver Nota 3)
#summary(indepvar$v67)
# Party
#freq(issp2009$party_lr)
#prop.table(table(indepvar$v5,indepvar$party_lr),1)*100
# paises sin datos: CL, CN, CY, HU, IL, TW
#freq(indepvar$cl_prty) # estan
#freq(indepvar$cn_prty) # no
#freq(indepvar$cy_prty) # si
#freq(indepvar$hu_prty) # si
#freq(indepvar$il_prty) # si
#freq(indepvar$tw_prty) # si
# para usarlas habría que clasificar partidos de esos países
# Chunk 15
#Eliminar income por paises.
indepvar=indepvar[-c(1:41)]
dim(indepvar)
View(indepvar)
# Chunk 16
#indepvar_graph<-as.data.frame(indepvar[,2:16])
print(dfSummary(indepvar[-c(8)], valid.col = FALSE, graph.magnif = 1),
max.tbl.height = 300, method = "render")
# Chunk 17
# Rename
getahead = issp2009[, c("v6", "v7", "v9", "v10", "v11", "v12",
"v14", "v16", # get ahead
"v5", "id")]
getahead$wealthy = getahead$v6
getahead$pareduc = getahead$v7
getahead$ambition = getahead$v9
getahead$hwork = getahead$v10
getahead$people = getahead$v11
getahead$polcone = getahead$v12
getahead$race = getahead$v14
getahead$gender = getahead$v16
getahead = getahead[-c(1:8)]
# recode values 8 9 to NA
#freq(getahead$wealthy)
getahead[3:10][getahead[3:10] > 5] <- NA
#freq(getahead$gender) # check ok
stargazer(getahead, type = "html")
# adjust labels
get_labels(getahead$wealthy)
getahead[, 3:10][getahead[, 3:10] >= 8] <- NA
get_labels(getahead[3:10]) # check
# Reverse code for SEM models
getahead[3:10] = 6 - getahead[3:10]
# Generate variables with 3 values for getahead mess model categoric
#names(getahead)
getahead_temp = subset(getahead[c(2, 3:10)])
#names(getahead_temp)
getahead_temp[2:9][getahead_temp[2:9] <  4] <- 3
# freq(getahead_temp$hwork)
#freq(getahead$hwork)
colnames(getahead_temp) = paste("c3", colnames(getahead_temp),
sep = "")
names(getahead_temp)[names(getahead_temp) == "c3id"] <- "id"
getahead_temp2 = merge(getahead, getahead_temp, by = c("id"))
names(getahead_temp2) # ok
getahead = getahead_temp2
# Chunk 18
plot_likert((getahead[,3:8]),
geom.colors   = c("#9ecae1", "#6baed6","#4292c6",
"#2171b5"), # colorbrewer2.org
sort.frq      = "neg.asc", # sort descending)
title         = "getahead",
intercept.line.color = "white", # vertical middle
expand.grid   = F, # no inner margins in plot
show.n        = FALSE, # hide N's in axis labels
grid.range    = 1.8,
geom.size = 0.6) # expand axis 130% )
# Chunk 19
# Save object
#  save(getahead, file="../objects/getahead.rda")
# Chunk 20
#names(issp2009)
detearn = issp2009[, c("v47", "v48", "v49", "v50", "v51",
"v52", "v5", "id")]
#names(detearn)
detearn$respons 	= detearn$v47
detearn$yeduc  	  = detearn$v48
detearn$family    = detearn$v49
detearn$child     = detearn$v50
detearn$welljob   = detearn$v51
detearn$hardjob   = detearn$v52
#names(detearn)
detearn = detearn[-c(1:6)]
#names(detearn)
# recode values 8 9 to NA
#summary(detearn)
# freq(detearn$respons)
detearn[3:8][detearn[3:8] > 5] <- NA
# freq(detearn$respons) # check ok
#knitr::kable(summary(detearn), "html")
# Out Portugal (no answer in well job item)
detearn[which(detearn$v5 == 620), ] = NA
# adjust labels ###PROB PORTUCAL!!!
#get_labels(detearn)
detearn[, 3:8][detearn[, 3:8] >= 8] <- NA
detearn$welljob <- sjlabelled::set_na(detearn$welljob, na = c(0))
#knitr::kable(summary(detearn), "html")
# freq(detearn$welljob) ## prob portugal
detearn$welljob[detearn$welljob == 0] = NA
#get_labels(detearn$welljob)
labels(detearn$welljob) = labels(detearn$respons)### PROB NOT SOLVED
# Reverse code for SEM models
detearn$respons <- as.numeric(detearn$respons)
detearn$yeduc <- as.numeric(detearn$yeduc)
detearn$family <- as.numeric(detearn$family)
detearn$child <- as.numeric(detearn$child)
detearn$welljob <- as.numeric(detearn$welljob)
detearn$hardjob <- as.numeric(detearn$hardjob)
# Chunk 21
sjPlot::plot_likert(detearn[, 3:8],
geom.colors   = c("#9ecae1", "#6baed6", "#4292c6", "#2171b5"), # colorbrewer2.org
cat.neutral = 3,
sort.frq      = "neg.asc", # sort descending)
title         = "Before detearn",
intercept.line.color = "white", # vertical middle
expand.grid   = F, # no inner margins in plot
show.n        = FALSE, # hide N's in axis labels
grid.range    = 1.8,
geom.size = 0.6) # expand axis 130% ))
detearn$respons = as.numeric(6 - detearn$respons)
detearn$yeduc = as.numeric(6 - detearn$yeduc)
detearn$family = as.numeric(6 - detearn$family)
detearn$child = as.numeric(6 - detearn$child)
detearn$welljob = as.numeric(6 - detearn$welljob)
detearn$hardjob = as.numeric(6 - detearn$hardjob)
sjPlot::plot_likert(detearn[,3:8],
geom.colors   = c("#9ecae1", "#6baed6", "#4292c6", "#2171b5"), # colorbrewer2.org
cat.neutral = 3,
sort.frq      = "neg.asc", # sort descending)
title         = "After detearn",
intercept.line.color = "white", # vertical middle
expand.grid   = F, # no inner margins in plot
show.n        = FALSE, # hide N's in axis labels
grid.range    = 1.8,
geom.size = 0.6) # expand axis 130% ))
freq(detearn$respons)
# Chunk 22
# 3. MEASURING BELIEFS & PERCEPTIONS ------ -
# 3.1 Define object --------------------- -------------------------------
#			load("./objects/getahead.rda")
#			load("./objects/detearn.rda")
#	names(getahead)
#	names(detearn)
merit_per_pref=merge(getahead,detearn, by=c("id","v5"))
#	names(merit_per_pref)
# Estimación del modelo c/ unmerit 2do orden
cfa_perpref2 <- '
# latent variables
merit =~ hwork + ambition
parent=~ wealthy + pareduc
backg=~ race + gender
network=~ people + polcone
unmerit=~ parent + backg + network # 2nd order
bmerit =~ welljob + hardjob
need=~ family + child
'
fit_perpref2 <- cfa(cfa_perpref2, data = merit_per_pref,missing = "ML")
#	  summary(fit_perpref2, fit.measures=TRUE,standardized=TRUE)
# Path model
semPaths(fit_perpref2,layout = "tree", rotation = 2,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 3.5, sizeLat = 6)
# Chunk 23
out <- mice(merit_per_pref[,c(3:10,19:24)], m=5)
# Chunk 24
# Multiple imputation (para recuperar missings en scores) - REVIEW THIS, command lavPredict from 2017 should predict with missing values therefore saving from multiple imputation
# generate 5 multiple complete datasets
D1 <- complete(out, 1)
D2 <- complete(out, 2)
D3 <- complete(out, 3)
D4 <- complete(out, 4)
D5 <- complete(out, 5)
# fit model for each complete dataset
fit1 <- cfa(cfa_perpref2, data = D1)
fit2 <- cfa(cfa_perpref2, data = D2)
fit3 <- cfa(cfa_perpref2, data = D3)
fit4 <- cfa(cfa_perpref2, data = D4)
fit5 <- cfa(cfa_perpref2, data = D5)
# predict scores for all models
p1 <- predict(fit1)
p2 <- predict(fit2)
p3 <- predict(fit3)
p4 <- predict(fit4)
p5 <- predict(fit5)
# compute 'average' across 5 sets of scores:
scores <- (p1 + p2 + p3 + p4 + p5) / 5
# Generate factor scores
scores_dat = as.data.frame(scores)
dim(scores_dat)
str(scores_dat)
summary(scores)
# Generate object with factor scores
dim(merit_per_pref)
dim(scores_dat)
merit_per_pref_sco = cbind(merit_per_pref, scores)
# Save object with factor scores
#	names(merit_per_pref_sco)
merit_per_pref_sco = merit_per_pref_sco[, c(1:2, 25:31)]
#	  save(merit_per_pref_sco,
#	  file="./objects/merit_per_pref_sco.rda")
# Chunk 25
indiv<- merge (indepvar, redistrib_sco, by = c("id"))
indiv <- merge (indiv,  merit_per_pref_sco, by = c("id"))
# Chunk 26
print(dfSummary(indiv, valid.col = FALSE, graph.magnif = 1),
max.tbl.height = 300, method = "render")
# Chunk 27
save(indiv, file="input/data/proc/indiv.rda")
# Chunk 28
agg_lm=aggregate(indiv, by=list(indiv$v5),FUN=mean, na.rm=TRUE)
colnames(agg_lm) <- paste("j", colnames(agg_lm), sep = "_")
table(agg_lm$j_v5)
agg_lm$v5=agg_lm$j_v5
mer_pref=merge(indiv,agg_lm, by="v5")
dim(mer_pref)
# Chunk 29
mer_pref$age_g = mer_pref$age - mer_pref$j_age
mer_pref$sex_g = mer_pref$sex - mer_pref$j_sex
mer_pref$univ_g = mer_pref$univ - mer_pref$j_univ
mer_pref$sstatus_g = mer_pref$sstatus - mer_pref$j_sstatus
summary(mer_pref$univ_g)
# Chunk 30
# Inequality swiid (4)
#load(url("https://raw.githubusercontent.com/franciscomeneses/bases/master/swiid8_3.rda"))
load("input/data/original/swiid8_3.rda")
# convertir desde formato original list a dataframe
swiid_summary <- swiid %>%  bind_rows() %>%
group_by(country, year) %>%
summarize_all(funs(mean, sd)) %>%
ungroup() %>% dplyr::rename(.dots=setNames(names(.),
str_replace(names(.), "_mean", ""))) %>%
dplyr::rename_(.dots=setNames(names(.),str_replace(names(.), "_sd", "_se")))
save(swiid_summary, file = "input/data/proc/swiid_summary.rda")
# Chunk 31
summary(swiid_summary$.dots...year)
swiid_summary09=subset(swiid_summary, .dots...year==2009)
# Chunk 32
# Generate equivalente country code
head(swiid_summary09$.dots...country)
as.numeric(swiid_summary09$country)
# Continuo
swiid_summary09$v5=countrycode(swiid_summary09$.dots...country,'country.name','iso3n')
str(swiid_summary09$v5)
# Categórico
swiid_summary09$v5c=countrycode(swiid_summary09$.dots...country,'country.name','iso3c')
str(swiid_summary09$v5c)
# Merge
#indepvar <- merge(swiid_summary09,indepvar,by=c("v5"))
#summary(indepvar$.dots..._1_gini_disp)
# Chunk 33
mer_pref<- merge(swiid_summary09,mer_pref, by=c("v5"))
# Chunk 34
mer_pref$gini_neto<- mer_pref$.dots...gini_disp
mer_pref$gini_mkt <- mer_pref$.dots...gini_mkt
# Chunk 35
mer_pref$redis_neto= as.numeric(mer_pref$gini_mkt - mer_pref$gini_neto)
mer_pref$redis_relativo = as.numeric(mer_pref$redis_neto / mer_pref$gini_mkt)
#hist(mer_pref$redis_relativo)
# Chunk 36
mer_pref$redis_bradley  <- as.numeric((1- mer_pref$gini_neto / mer_pref$gini_mkt) *100)
#hist(mer_pref$redis_bradley)
# Chunk 37
### Recode Age
# Age
redistributionswiid <- hist(mer_pref$redis_relativo)
summary(mer_pref$redis_relativo)
redistribbradley <- hist(mer_pref$redis_bradley)
cowplot::plot_grid(redistributionswiid, redistribbradley, ncol=1)
# Chunk 38
#Para descargar
#devtools::install_github("ropengov/rqog")
#library("rqog")
#qog2009_dta<-read_qog(
#  which_data = "standard",
#  data_type = "time-series",
#  year = 2009,
#  data_dir = NULL,
#  file_format = "csv",
#  download_only = FALSE,
#  cache = TRUE,
#  update_cache = FALSE
#)
# Chunk 39
load( file = "input/data/original/qog.rda")
#load(url('https://raw.githubusercontent.com/franciscomeneses/bases/master/qog.rda'))
# Extract 2009 data
qog2009 = subset(qog, year == 2009)
# hist(qog$sgi_ectx) # Desempeño de las políticas: políticas económicas - impuestos
# hist(qog$sgi_sogi) # Desempeño de las políticas: Políticas sociales - Desigualdades sociales globales
# Merge with ISSP countries for cleaning
load("input/data/proc/indepvar_contries.rda")
issp_countries =	aggregate(indepvar_contries[c("v5")],
list(indepvar_contries$country, indepvar_contries$v5c),
mean)
qog2009[c("ccode", "cname")] # check ISO codes
names(qog2009)[names(qog2009) == 'ccode'] <- 'v5'
qog2009_c = merge(issp_countries, qog2009, by = c("v5"))
dim(qog2009_c)
colSums(is.na(qog2009_c))
# Eliminar columnas con máximo 5 NAs
qog2009_c_na = qog2009_c[, colSums(is.na(qog2009_c)) < 6]
qog2009_c_na = qog2009_c %>% dplyr::select("v5", "fi_index") %>% as.data.frame()
# "sgi_ectx", "sgi_sogi" # Hasta ahora no hay valores, parece no haber para el 2009
# Chunk 40
mer_pref <- merge(mer_pref, qog2009_c_na, by=c("v5"))
# Chunk 41
library(readxl)
pibpc <- read_excel("input/data/original/pibpc.xls", sheet = "Data")
View(pibpc)
pibpc$v5c<-pibpc$CountryCode
pibpc$pibpc <- pibpc$`PIB per cápita (US$ a precios actuales)`
mer_pref <- merge(mer_pref, pibpc, by=c("v5c"))
sjPlot::plot_frq(mer_pref$pibpc, title = "Pib Per capita",show.mean = T , show.values = F,show.n = F, axis.labels = NULL, type = c("histogram"))
# Chunk 42
save(mer_pref, file="input/data/proc/mer_pref.rda")
# Chunk 43
gov_effect <- read_excel("input/data/original/Data_Extract_From_Indicadores_mundiales_de_buen_gobierno.xlsx")
gov_effect$v5c<-gov_effect$`paiscode`
gov_effect$goveffect <- as.numeric(gov_effect$`2009 [YR2009]`)
mer_pref <- merge(mer_pref, gov_effect, by=c("v5c"))
sjPlot::plot_frq(mer_pref$goveffect, title = "Government Effectivinnes",show.mean = T , show.values = F,show.n = F, axis.labels = NULL, type = c("histogram"))
# Chunk 44
save(mer_pref, file="input/data/proc/mer_pref.rda")
# Chunk 45
mer_pref_polycor <- mer_pref %>% dplyr::select(
"j_redist", "j_accum" , "j_merit","j_unmerit","j_bmerit","j_need",".dots...gini_disp",".dots...gini_mkt","fi_index", "pibpc", "redis_relativo","goveffect")
save(mer_pref_polycor, file ="input/data/proc/mer_pref_polycor.rda")
### Recode Age
# Age
redistributionswiid <- hist(mer_pref$redis_relativo)
summary(mer_pref$redis_relativo)
redistribbradley <- hist(mer_pref$redis_bradley)
comparation_redistriv<-cowplot::plot_grid(redistributionswiid, redistribbradley, ncol=1)
ggsave(comparation_redistriv, file = "output/images/redistriv_comparation.png")
### Recode Age
# Age
redistributionswiid <- hist(mer_pref$redis_relativo)
summary(mer_pref$redis_relativo)
redistribbradley <- hist(mer_pref$redis_bradley)
comparation_redistriv<-cowplot::plot_grid(redistributionswiid, redistribbradley, ncol=1)
ggsave(comparation_redistriv, file = "output/images/redistriv_comparation.png")
### Recode Age
# Age
redistributionswiid <- hist(mer_pref$redis_relativo)
summary(mer_pref$redis_relativo)
redistribbradley <- hist(mer_pref$redis_bradley)
comparation_redistriv<-cowplot::plot_grid(list(redistributionswiid, redistribbradley), ncol=1)
ggsave(comparation_redistriv, file = "output/images/redistriv_comparation.png")
### Recode Age
# Age
redistributionswiid <- hist(mer_pref$redis_relativo)
redistribbradley <- hist(mer_pref$redis_bradley)
### Recode Age
# Age
redistributionswiid <- hist(mer_pref$redis_relativo)
comparation_redistriv<-cowplot::plot_grid(list(redistributionswiid, redistribbradley), ncol=1)
### Recode Age
# Age
redistributionswiid <- hist(mer_pref$redis_relativo)
redistribbradley <- hist(mer_pref$redis_bradley)
ggsave(plot = plot_grid(list(redistributionswiid, redistribbradley, plotredistfi, plotredistfi_outliers)),
filename = "output/results/redistriv_comparation", width = 10, height = 10, dpi= "retina")
### Recode Age
# Age
redistributionswiid <- hist(mer_pref$redis_relativo)
redistribbradley <- hist(mer_pref$redis_bradley)
ggsave(plot = plot_grid(list(redistributionswiid, redistribbradley, plotredistfi, plotredistfi_outliers)),
filename = "../output/results/redistriv_comparation", width = 10, height = 10, dpi= "retina")
hist1 <- mer_pref %>% ggplot(aes(x=redis_relativo)) + geom_histogram()
hist1
plot_grid(list(hist1, hist2), ncol=1)
hist1 <- mer_pref %>% ggplot(aes(x=redis_relativo)) + geom_histogram()
hist2 <- mer_pref %>% ggplot(aes(x=redis_bradley)) + geom_histogram()
plot_grid(list(hist1, hist2), ncol=1)
plot_grid(list(hist1, hist2))
ggsave(plot_grid(list(hist1, hist2)), file ="output/images/redistriv_comparation.png")
ggsave(plot_grid(hist1, hist2), file ="output/images/redistriv_comparation.png")
ggsave(plot_grid(hist1, hist2, ncol =1),  file ="output/images/redistriv_comparation.png")
sjPlot::plot_frq(indepvar$sex, title ="Gender before")
sjPlot::plot_frq(indepvar$sex, title ="Gender before") + xlab("Sex")
sjPlot::plot_frq(indepvar$sex, title ="Gender before") + xlav("Sex")
sjPlot::plot_frq(indepvar$sex, title ="Gender before") + xlab("Sex")
library(ggplot2)
sjPlot::plot_frq(indepvar$sex, title ="Gender before") + xlab("Sex")
setwd("~/GitHub/meritocracy-preferences")
source('~/GitHub/meritocracy-preferences/render-site.R', echo=TRUE)
source('~/GitHub/meritocracy-preferences/render-site.R', echo=TRUE)
source('~/GitHub/meritocracy-preferences/render-site.R', echo=TRUE)
source('~/GitHub/meritocracy-preferences/render-site.R', echo=TRUE)
source('~/GitHub/meritocracy-preferences/render-site.R', echo=TRUE)
sjPlot::plot_likert(detearn[,3:8],
geom.colors   = c("#9ecae1", "#6baed6", "#4292c6", "#2171b5"), # colorbrewer2.org
cat.neutral = 3,
sort.frq      = "neg.asc", # sort descending)
title         = "Before detearn",
intercept.line.color = "white", # vertical middle
expand.grid   = F, # no inner margins in plot
show.n        = FALSE, # hide N's in axis labels
grid.range    = 1.8,
geom.size = 0.6) # expand axis 130% ))
before_detearn<-sjPlot::plot_likert(detearn[,3:8],
geom.colors   = c("#9ecae1", "#6baed6", "#4292c6", "#2171b5"), # colorbrewer2.org
cat.neutral = 3,
sort.frq      = "neg.asc", # sort descending)
title         = "Before detearn",
intercept.line.color = "white", # vertical middle
expand.grid   = F, # no inner margins in plot
show.n        = FALSE, # hide N's in axis labels
grid.range    = 1.8,
geom.size = 0.6) # expand axis 130% ))
save(befbefore_detearn, file="output/images/before_detearn.png")
before_detearn<-sjPlot::plot_likert(detearn[,3:8],
geom.colors   = c("#9ecae1", "#6baed6", "#4292c6", "#2171b5"), # colorbrewer2.org
cat.neutral = 3,
sort.frq      = "neg.asc", # sort descending)
title         = "Before detearn",
intercept.line.color = "white", # vertical middle
expand.grid   = F, # no inner margins in plot
show.n        = FALSE, # hide N's in axis labels
grid.range    = 1.8,
geom.size = 0.6) # expand axis 130% ))
save(before_detearn, file="output/images/before_detearn.png")
ggsave(before_detearn, file="output/images/before_detearn.png")
before_detearn<-sjPlot::plot_likert(detearn[,3:8],
geom.colors   = c("#9ecae1", "#6baed6", "#4292c6", "#2171b5"), # colorbrewer2.org
cat.neutral = 3,
sort.frq      = "neg.asc", # sort descending)
title         = "Before detearn",
intercept.line.color = "white", # vertical middle
expand.grid   = F, # no inner margins in plot
show.n        = FALSE, # hide N's in axis labels
grid.range    = 1.8,
geom.size = 0.6) # expand axis 130% ))
save(before_detearn, file="output/images/before_detearn.png")
source('~/GitHub/meritocracy-preferences/render-site.R', echo=TRUE)
