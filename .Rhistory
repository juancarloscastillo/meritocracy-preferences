pref_agg=aggregate(pref, by=list(pref$v5c),
FUN=mean, na.rm=TRUE)
names(pref_agg)[names(pref_agg)=="Group.1"] <- "v5c"
# Macro descriptives
hist(pref_agg$gini_net)
table(pref_agg$accum)   ############# no encuentro esta variable accum
#  plot_scatter(pref_agg, gini_net, accum,
#	dot.labels = pref_agg$v5c,
#fit.line = "lm",
#show.ci = TRUE)
#table(pref_agg$redis)
#plot_scatter(pref_agg, gini_net, redist,
#dot.labels = pref_agg$v5c,
#fit.line = TRUE,
#show.ci = TRUE 	)
# Sin ZAF outlier (igual, no cambia)
#  	pref_agg2 <- pref_agg[which(pref_agg$v5c!='ZAF'), ]
#	    plot_scatter(pref_agg2$gini_net,pref_agg2$redist,
#    	dot.labels = pref_agg2$v5c,
#    	fit.line = TRUE,
#    	show.ci = TRUE
#	   	)
# Chunk 10
# 5.3 Models ---------------------------- ######
#  Models SEM simple
sem_b <- '
# latent variables
redist =~ income_dif + unemployed + taxes
accum  =~ health + educ
redist + accum ~ univ + quintile + sstatus + gini_market'
fit_2c <- sem(sem_b,data=pref, ordered = c("income_dif",
"unemployed","taxes", "health", "educ"))
#summary(fit_2c, fit.measures=TRUE,standardized=TRUE)
cnames <- c("Factor","Indicator","Loading (MLR)","Loading (DWLS)")
kable(left_join(x = standardizedsolution(fit_2c) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),y = standardizedsolution(fit_2c) %>% filter(op=="=~") %>% select(lhs,rhs,est.std),c("lhs","rhs")),format = "markdown",digits = 2,col.names = cnames, caption = "Factor loadings")
sum_fit<- bind_rows(fitmeasures(fit_2c)[c("chisq.scaled","df","cfi","cfi.scaled","cfi.robust","rmsea","rmsea.scaled","rmsea.robust")])
sum_fit$mod <- c("Model 1")
sum_fit$est <- c("MLR")
#sum_fit <- select(sum_fit,mod,est,everything())
colnames <- c("Model","Estimator","$\\chi^2$","df","CFI","CFI.sca","CFI.rob","RMSEA","RMSEA.sca","RMSEA.rob")
sumtable01<- kable(sum_fit,digits = 3,format = "html",row.names = F,booktabs=T, caption = "Summary fit indices wave 01",col.names = colnames,escape = FALSE) %>%
kable_styling(full_width = F)  %>%
collapse_rows(columns = 1,valign = "middle")  %>%
footnote(number = c("Model 1: fixed order by percepction/preferenc"));
sumtable01
# Multilevel (with factor scores) ################################## No funciono nada de este apartado.
# check simple regresion
#ols_prefred=lm(redist ~ univ + quintile + sstatus + gini_market)
# summary(ols_prefred) # ok, similar SEM, scores OK
# Multilevel models redist
# Null
# 	mlprefred_0 = lmer(redist ~ 1 + (1 | v5c))
#		screenreg(mlprefred_0) # de library texreg
#
#			# Graph
#			sjp.lmer(mlprefred_0, sort.est="(Intercept)")
#
# ICC
#			varcomp=as.data.frame(VarCorr(mlprefred_0))
#			tau00=varcomp[1,4]
#			sigma2=varcomp[2,4]
#			tau00/(tau00+sigma2)
# Individual level vars
#			mlprefred_1 = lmer(redist_n ~ 1 + univ +
#					as.factor(quintile_miss) +	sstatus + sex + age +
#					(1 | v5))
#			screenreg(mlprefred_1)
#
#		# Macro level vars
#			mlprefred_2 = lmer(redist ~ 1 + univ +
#					as.factor(quintile_miss)+ sstatus + gini_market +
#					univ_g + (1 | v5))
#			screenreg(mlprefred_2)
#
#	# Multilevel models accumulation
#
# Null
#	  	mlaccum_0 = lmer(accum ~ 1 + (1 | v5c))
#			screenreg(mlaccum_0) # de library texreg
#
# Graph
#			sjp.lmer(mlaccum_0, sort.est="(Intercept)")
#
# ICC
#			varcomp=as.data.frame(VarCorr(mlaccum_0))
#			tau00=varcomp[1,4]
#			sigma2=varcomp[2,4]
#			tau00/(tau00+sigma2)
#
#		# Individual level vars
#			mlaccum_1 = lmer(accum ~ 1 + univ + as.factor(quintile_miss) +
#					sstatus + sex + age + univ*sex + age*age + (1 | v5))
#			screenreg(mlaccum_1)
#
# Macro level vars
#			mlaccum_2 = lmer(accum ~ 1 + univ_g + as.factor(quintile_miss) +
#					(sstatus -f_sstatus) + gini_net + (1 | v5))
#			screenreg(mlaccum_2)
# Random slope & cross-level
#			mlaccum_3 = lmer(accum ~ 1 + univ_g + f_sstatus + gini_net +
#					gini_net* f_sstatus +	(1 + f_sstatus | v5))
#			screenreg(mlaccum_3)
#			# Graphs
#			sjp.lmer(mlaccum_3, sort.est = "(Intercept)")
#			sjp.lmer(mlaccum_3, type = "rs.ri")
#
#			mlaccum_4 = lmer(accum ~ 1 + univ + f_sstatus + gini_net + gini_net*f_sstatus + hhincome +	(1 + hhincome | v5))
#			screenreg(mlaccum_4)
# End sec. 5 ----------------------------
# Chunk 11
# 6.2 Descriptives ---------------------- #####
load("input/data/proc/meritocracy.rda")
# Adjust data
merit_agg=aggregate(meritocracy, by=list(meritocracy$v5c),
FUN=mean, na.rm=TRUE)
names(merit_agg)[names(merit_agg)=="Group.1"]="v5c"
#   names(merit_agg)
#  dim(merit_agg)
# Macro descriptives
################################agregar Polichoric.
# Macro level corr
corMat <- cor(merit_agg[c("merit","unmerit","bmerit","need","gini_net","gini_market","j_fi_index")], use="pairwise.complete.obs") # estimar matriz pearson
options(digits=2)
corMat # muestra matriz
#     M=cor(merit_agg) # matriz simple
corrplot.mixed(corMat)
##### la mayoria de los str.scatter precentan problemas en los limites "subindice fuera de limites.
plot_scatter(merit_agg, gini_net, bmerit,
dot.labels = merit_agg$v5c,
fit.line = "lm",
show.ci = TRUE)
# Save
# dev.copy(png,"output/results/gini_bmerit.png"); dev.off()
plot_scatter(merit_agg, gini_net,unmerit,
dot.labels = merit_agg$v5c,
fit.line = "lm",
show.ci = TRUE)
plot_scatter(merit_agg, gini_net,need,
dot.labels = merit_agg$v5c,
fit.line = "lm",
show.ci = TRUE)
# Save
#dev.copy(png,"output/results/fi_need.png"); dev.off()
# Chunk 12
plot_scatter(merit_agg, j_fi_index, need,
dot.labels = merit_agg$v5c,
fit.line = "lm",
show.ci = TRUE)
# Save
# dev.copy(png,"output/results/gini_fi.png"); dev.off()  Este objeto tampoco estaba en la carpeta.
# Chunk 13
# Sin outliers
merit_agg2 <- merit_agg[which(merit_agg$v5c!="ZAF" & merit_agg$v5c!="CHN" &  merit_agg$v5c!="CHL" ), ]
plot_scatter(merit_agg2, gini_net, unmerit,
dot.labels = merit_agg2$v5c,
fit.line = TRUE,
show.ci = TRUE
)
# Chunk 14
# 6.3 Models -----------------------------#####
# Multilevel (with factor scores)
load("input/data/proc/meritocracy.rda")
# Adjust some variables
meritocracy$Quintile=as.factor(meritocracy$quintile_miss)
levels(meritocracy$Quintile)[6] <- "miss"
# check simple regresion
ols_merit=lm(merit ~ univ + Quintile + sstatus + gini_net, data = meritocracy)
summary(ols_merit) # ok, similar SEM, scores OK
# Multilevel models merit
# Null
mlmerit_0 = lmer(merit ~ 1 + (1 | v5c), data = meritocracy)
htmlreg(mlmerit_0) # de library texreg
# Graph
#	sjp.lmer(mlmerit_0, sort.est="(Intercept)")   No encuentro el paquete.
# ICC
varcomp=as.data.frame(VarCorr(mlmerit_0))
tau00=varcomp[1,4]
sigma2=varcomp[2,4]
tau00/(tau00+sigma2)
# Individual level vars
mlmerit_1 = lmer(merit ~ 1 + univ +	quintile_miss +
sstatus + sex + age + (1 | v5), data = meritocracy)
htmlreg(mlmerit_1)
# Macro level vars
mlmerit_2 = lmer(bmerit ~ 1 + gini_net + (1 | v5), data = meritocracy)
htmlreg(mlmerit_2)
# Models meritocracy and preferences
load("input/data/proc/meritocracy.rda")
load("input/data/proc/redistrib_sco.rda")
mer_pref=merge(meritocracy, redistrib_sco, by=c("id"))
#   names(mer_pref)
mer_pref_agg=aggregate(mer_pref, by=list(mer_pref$v5c),
FUN=mean, na.rm=TRUE)
names(mer_pref_agg)[names(mer_pref_agg)=="Group.1"]="v5c"
#  names(mer_pref_agg)
#  dim(mer_pref_agg)
# Graphs    # mismo problemas de subindices.
plot_scatter(mer_pref_agg,merit , bmerit,
dot.labels = mer_pref_agg$v5c,
fit.line = lm,
show.ci = TRUE)
plot_scatter(mer_pref_agg, merit, redist,
dot.labels = mer_pref_agg$v5c,
fit.line = lm,
show.ci = TRUE)
# Save
#    dev.copy(png,"loc_merit_pref_int/results/merit_redis.png"); dev.off()
plot_scatter(mer_pref_agg, unmerit,redist,
dot.labels = mer_pref_agg$v5c,
fit.line = "lm",
show.ci = TRUE)
# Save
# dev.copy(png,"loc_merit_pref_int/results/unmerit_redis.png"); dev.off()
#    plot_scatter(mer_pref_agg$redist,mer_pref_agg$accum)
plot_scatter(mer_pref_agg, redist,accum,
dot.labels = mer_pref_agg$v5c,
fit.line = "lm",
show.ci = TRUE)
source('C:/Users/Anais/Downloads/meritocracy-preferences-master/render-site.R', echo=TRUE)
source('C:/Users/Anais/Downloads/meritocracy-preferences-master/render-site.R', echo=TRUE)
issp2009=read_stata("input/data/original/ZA5400_v4-0-0.dta")
library(sjPlot)
library(sjmisc) # several functions,ej read_stata
library(descr)
library(memisc)  # codebook
library(psych) # cor2latex
library(corrplot) # graph correlations
library(lavaan)
library(stargazer)
library(semTools)
library(plyr) # count
library(dplyr)
library(car) # recode
library(ggplot2)
library(Hmisc)
library(tidyverse)
library(data.table)
library(stringr)
library(countrycode)
library(lme4)
library(texreg)
library(mice)
library(ggrepel) # for scatter labels in sjp.scatter
library(semPlot)
library(haven)
library(sjlabelled)
library(kableExtra)
#library(Hmisc)
(issp2009$v4, issp2009$v5, mean, na.rm=TRUE)
# Check & generate IDs (v4: respondent, v5: country)
tapply(issp2009$v4, issp2009$v5, mean, na.rm=TRUE)
# Check & generate IDs (v4: respondent, v5: country)
tapply(issp2009$v4, issp2009$v5, mean, na.rm=TRUE)
names(issp2009) <- tolower(names(issp2009)) # change to small
# Check & generate IDs (v4: respondent, v5: country)
tapply(issp2009$v4, issp2009$v5, mean, na.rm=TRUE)
# Generar nueva id secuencial individuos por paÃƒ?s para merges
issp2009$id <- sequence(tabulate(issp2009$v5))
tapply(issp2009$id, issp2009$v5, mean, na.rm=TRUE) # ok
summary(issp2009$id)
issp2009$idtem=issp2009$v5*10000
issp2009$id=issp2009$idtem + issp2009$id
# Rename & define object
names(issp2009)
redistrib=issp2009[,c("v5","v33","v34","v36","v38","v39","id")]
redistrib$income_dif= redistrib$v33
redistrib$unemployed= redistrib$v34
redistrib$taxes     = redistrib$v36
redistrib$health    = redistrib$v38
redistrib$educ      = redistrib$v39
names(redistrib)
redistrib=redistrib[-c(2:6)]
stargazer(redistrib[-c(1,2)], type="text")
# Recode NAs
freq(redistrib$income_dif)
stargazer(redistrib[-c(1,2)], type="html")
freq(redistrib$income_dif)
redistrib[3:7][redistrib[3:7] > 5] <- NA
freq(redistrib$income_dif) # check ok
# adjust labels NAs
get_labels(redistrib$income_dif)
# set_na(redistrib[3:7]) <- c(8, 9) ############################## SET_NA NO FUNCIONA.
get_labels(redistrib$income_dif) # check
# Dataset with original code for sjp.likert graph
redistrib2=redistrib
# Checks
names(redistrib)
dim(redistrib)
names(redistrib)
dim(redistrib)
aggregate(redistrib, by=list(redistrib$v5), FUN=mean,
na.rm=TRUE)
indepvar=issp2009
summary(indepvar$id)
length(indepvar$id)
sjPlot::plot_frq(indepvar$sex)
indepvar$sex=ifelse(indepvar$sex==1,0,
ifelse(indepvar$sex==2,1,NA))
sjPlot::plot_frq((indepvar$age))
summary(indepvar$age)
which(indepvar$age > 85) # / 461 casos !
which(indepvar$age < 15) # / 0 casos !
indepvar$age[indepvar$age > 85] = NA
indepvar$age_c=indepvar$age
indepvar$age_c[indepvar$age_c <= 25] = 1
indepvar$age_c[indepvar$age_c > 25 & indepvar$age_c <=35] = 2
indepvar$age_c[indepvar$age_c > 35 & indepvar$age_c <=45] = 3
indepvar$age_c[indepvar$age_c > 45 & indepvar$age_c <=55] = 4
indepvar$age_c[indepvar$age_c > 55 & indepvar$age_c <=65] = 5
indepvar$age_c[indepvar$age_c > 65] = 6
freq(indepvar$age_c)
sjPlot::plot_frq(indepvar$degree, coord.flip = TRUE)
freq(indepvar$degree)
indepvar$degree[indepvar$degree > 5]=NA
freq(indepvar$degree)
indepvar$univ=indepvar$degree
indepvar$univ=ifelse(indepvar$univ<=4,0,
ifelse(indepvar$univ==5,1,NA))
freq(indepvar$univ)
names(indepvar)
freq(indepvar$cl_inc)
summary(indepvar[182:222]) # missings vary (note 2)
# Para todos, recode missings dÃƒ?gitos
indepvar[182:222][indepvar[182:222] >= 9999990] <- NA
indepvar[182:222][indepvar[182:222] == 999990] =NA
indepvar[182:222][indepvar[182:222] == 999997] =NA
indepvar[182:222][indepvar[182:222] == 999998] =NA
indepvar[182:222][indepvar[182:222] == 999999] =NA
summary(indepvar[182:222])
summary(indepvar$cl_inc)
summary(indepvar$ar_inc)
indepvar[182:222][indepvar[182:222] == 0] <- 111111
incomes=indepvar[182:222]
indepvar$income=rowSums(indepvar[182:222],na.rm = TRUE)
length(indepvar$income)
summary(indepvar$income)
length(indepvar$income)
head(indepvar[c("ar_inc","cl_inc", "income")])
indepvar$income[indepvar$income ==0]=NA
indepvar$income[indepvar$income ==1111]=0
summary(indepvar$income)
freq(indepvar$hompop)
indepvar$hompop[indepvar$hompop==99]=NA
# Ahora dividir el vector income por nÃ‚Â° de personas en hogar
indepvar$hhincome=indepvar$income/indepvar$hompop
summary(indepvar$hhincome)
freq(indepvar$hhincome)
# Y ajustar NAs de la variable final ingreso continuo
indepvar$hhincome[indepvar$hhincome==0]= NA
indepvar$hhincome[indepvar$income==111111]= 0
indepvar$hhincome[indepvar$hompop==0]= NA
freq(indepvar$hhincome)
#	check
income=indepvar[c("v5", "ar_inc", "hompop","income",
"hhincome")]
#	View(income)
# Generar quintiles de ingreso
indepvar %>% group_by(v5) %>% mutate(quintile =
ntile(hhincome,5)) ->indepvar
# Check
freq(indepvar$quintile)
prop.table(table(indepvar$v5,indepvar$quintile),1)*100
# Generar quintiles con NA como categorÃƒ?a
indepvar$quintile_miss=indepvar$quintile
freq(indepvar$quintile_miss)
indepvar$quintile_miss[is.na(indepvar$quintile_miss)] = 6
freq(indepvar$quintile_miss)
# Subjective status
# Individual
freq(indepvar$v44)
indepvar$sstatus=indepvar$v44
indepvar$sstatus[indepvar$ssttus>10]=NA
freq(indepvar$sstatus)
# Family
freq(indepvar$v45)
indepvar$f_sstatus=indepvar$v45
indepvar$f_sstatus[indepvar$f_sstatus>10]=NA
freq(indepvar$f_sstatus)
# Party
freq(issp2009$party_lr)
prop.table(table(indepvar$v5,indepvar$party_lr),1)*100
# paises sin datos: CL, CN, CY, HU, IL, TW
freq(indepvar$cl_prty) # estan
freq(indepvar$cn_prty) # no
freq(indepvar$cy_prty) # si
freq(indepvar$hu_prty) # si
freq(indepvar$il_prty) # si
freq(indepvar$tw_prty) # si
# para usarlas habrÃƒ?a que clasificar partidos de esos paÃƒ?ses
# Home value (ver Nota 3)
freq(indepvar$v67)
# Inequality swiid (4)        #########################3 No encuentro el objeto.
load("data/swiid/SWIIDv5_0.RData")
# Inequality swiid (4)        #########################3 No encuentro el objeto.
load("input/data/original/swiid8_2")
# Inequality swiid (4)        #########################3 No encuentro el objeto.
swiid =	read_stata("input/data/original/swiid8_2.dta")
swiid_summary <- swiid %>%  bind_rows() %>%
group_by(country, year) %>%
summarize_all(funs(mean, sd)) %>%
ungroup() %>% rename_(.dots=setNames(names(.),
str_replace(names(.), "_mean", ""))) %>%
rename_(.dots=setNames(names(.),
str_replace(names(.), "_sd", "_se")))
swiid_summary <- swiid %>%  bind_rows() %>%
group_by(country, year) %>%
summarize_all(funs(mean, sd)) %>%
ungroup() %>% rename_(.dots=setNames(names(.),
str_replace(names(.), "_mean", ""))) %>%
rename_(.dots=setNames(names(.),
str_replace(names(.), "_sd", "_se")))
# convertir formato original list a dataframe
swiid_summary <- swiid %>%  bind_rows() %>%
group_by(country, year) %>%
summarize_all(funs(mean, sd)) %>%
ungroup() %>% rename(.dots=setNames(names(.),
str_replace(names(.), "_mean", ""))) %>%
rename_(.dots=setNames(names(.),
str_replace(names(.), "_sd", "_se")))
# Filter only 2009
swiid_summary09=subset(swiid_summary, year==2009)
View(swiid_summary)
#		names(swiid_summary)
table(swiid_sumary$year)
#		names(swiid_summary)
table(swiid_summary$year)
#		names(swiid_summary)
table(swiid_summary$year)
#		names(swiid_summary)
table(swiid_summary$.dots...year)
swiid_summary09=subset(swiid_summary, .dots...year==2009)
swiid_summary09$country
table(swiid_summary09$.dots...country)
as.numeric(swiid_summary09$country)
# Continuo
swiid_summary09$v5=countrycode(swiid_summary09$country,'country.name','iso3n')
# Continuo
swiid_summary09$.dots...v5=countrycode(swiid_summary09$.dots...country,'country.name','iso3n')
swiid_summary09$v5
swiid_summary09$.dots...v5
# Continuo
swiid_summary09$v5=countrycode(swiid_summary09$.dots...country,'country.name','iso3n')
swiid_summary09$v5
str(swiid_summary09$v5)
# CategÃƒÂ³rico
swiid_summary09$v5c=countrycode(swiid_summary09$country,'country.name','iso3c')
# CategÃƒÂ³rico
swiid_summary09$v5c=countrycode(swiid_summary09$.dots...country,'country.name','iso3c')
str(swiid_summary09$v5c)
# Merge
indepvar <- merge(swiid_summary09,indepvar,by=c("v5"))
indepvar=indepvar[,c(1:12,95:100,364:378)]
names(indepvar)
freq(indepvar$gini_net)
freq(indepvar$gini_net)
freq(indepvar$.dots...gini_net)
freq(indepvar$.dots...gini_net)
# Merge
indepvar <- merge(swiid_summary09,indepvar,by=c("v5"))
freq(indepvar$gini_net)
freq(indepvar$.dots...gini_net)
freq(indepvar$.dots...gini_disp_se)
summary(indepvar$gini_net)
summary(indepvar$.dots...gini_disp_se)
# Merge
indepvar <- merge(swiid_summary09,indepvar,by=c("v5"))
freq(indepvar$.dots...gini_disp_se)
# Merge
indepvar <- merge(swiid_summary09,indepvar,by=c("v5"))
freq(indepvar$.dots...gini_disp_se)
swiid_summary <- swiid %>%  bind_rows() %>%
group_by(country, year) %>%
summarize_all(funs(mean, sd)) %>%
ungroup() %>% rename(.dots=setNames(names(.),
str_replace(names(.), "_mean", ""))) %>%
rename_(.dots=setNames(names(.),
str_replace(names(.), "_sd", "_se")))
#		names(swiid_summary)
table(swiid_summary$.dots...year)
swiid_summary09=subset(swiid_summary, .dots...year==2009)
table(swiid_summary09$.dots...country)
as.numeric(swiid_summary09$country)
# Continuo
swiid_summary09$v5=countrycode(swiid_summary09$.dots...country,'country.name','iso3n')
swiid_summary09$v5
str(swiid_summary09$v5)
# CategÃƒÂ³rico
swiid_summary09$v5c=countrycode(swiid_summary09$.dots...country,'country.name','iso3c')
str(swiid_summary09$v5c)
# Merge
indepvar <- merge(swiid_summary09,indepvar,by=c("v5"))
freq(indepvar$.dots...gini_disp_se)
summary(indepvar$.dots...gini_disp_se)
# Merge qog
load("input/data/proc/qog_merit.rda")
summary(indepvar$.dots...gini_disp_se)
View(indepvar)
_1_gini_disp
freq(indepvar$.dots..._1_gini_disp)
summary(indepvar$.dots...gini_disp_se)
summary(indepvar$.dots..._1_gini_disp)
aggregate(indepvar[c("v5","gini_net")],
aggregate(indepvar[c("v5","gini_net")],list(indepvar$country,indepvar$v5c),mean)
aggregate(indepvar[c("v5","gini_net")],list(indepvar$country,indepvar$v5c),mean)
aggregate(indepvar[c("v5",".dots..._1_gini_disp")],list(indepvar$country,indepvar$v5c),mean)
aggregate(indepvar[c("v5",".dots..._1_gini_disp")],list(indepvar$.dots...country,indepvar$.dots...v5c),mean)
aggregate(indepvar[c("v5",".dots..._1_gini_disp")],
list(indepvar$.dots...country,indepvar$.dots...v5c.x),mean)
aggregate(indepvar[c("v5","gini_net")],
list(indepvar$.dots...country,indepvar$v5c.x),mean)
# check
aggregate(indepvar[c("v5","gini_net")],list(indepvar$.dots...country,indepvar$v5c.x),mean)
